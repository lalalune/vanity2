name: Build and Push Cog Model to Replicate

on:
  push:
    branches: [ main ] # Trigger on pushes to the main branch
  workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  build_and_push:
    runs-on: ubuntu-latest # Use a standard Linux runner
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # NOTE: Setting up Docker/Buildx is often needed for advanced builds,
      # but Cog typically handles this internally if docker is available.
      # If issues arise, consider adding Docker setup steps like:
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      - name: Install Cog
        run: sudo curl -o /usr/local/bin/cog -L https://github.com/replicate/cog/releases/latest/download/cog_`uname -s`_`uname -m` && sudo chmod +x /usr/local/bin/cog

      - name: Explicitly Compile CUDA Kernel (for debugging)
        # Run nvcc separately to see detailed output
        # We need to simulate the Cog build environment closely
        # 1. Find the CUDA version Cog would use (e.g., 11.8 from cog.yaml)
        # 2. Use a base image with that CUDA toolkit
        # For simplicity here, we assume nvcc is available on the runner PATH via Cog's setup or a base image.
        # If this fails due to nvcc not found, we might need a more complex setup using a specific Docker container.
        working-directory: ./core/cuda # Change to the cuda directory
        run: |
          echo "Attempting to compile CUDA kernel..."
          nvcc --ptx -arch=sm_70 -O3 -I./cuda-ecc-ed25519 --std=c++11 vanity_generator.cu -o kernel.ptx > nvcc_stdout.log 2> nvcc_stderr.log || true
          echo "--- NVCC STDOUT ---"
          cat nvcc_stdout.log
          echo "--- NVCC STDERR ---"
          cat nvcc_stderr.log
          # Check if compilation failed (exit code != 0) by checking stderr log size or specific error patterns if needed
          if [ -s nvcc_stderr.log ]; then
            echo "NVCC compilation failed. See errors above."
            exit 1 # Fail the workflow step
          fi
          echo "NVCC compilation successful (kernel.ptx created)."
        # Note: The || true prevents the step from failing immediately on nvcc error,
        # allowing us to cat the logs. We explicitly fail later if stderr is not empty.

      - name: Build Cog model image (uses pre-compiled kernel.ptx)
        # This command now expects kernel.ptx to exist from the previous step
        run: cog build -t solvanitycl-temp-build # Use a temporary tag

      - name: Log in to Replicate
        # Use the REPLICATE_API_TOKEN secret stored in GitHub repo settings
        if: github.event_name == 'push' # Only login/push on actual push events
        run: echo "${{ secrets.REPLICATE_API_TOKEN }}" | cog login

      - name: Push image to Replicate
        # Cog push reads the destination from the 'image:' field in cog.yaml
        if: github.event_name == 'push' # Only login/push on actual push events
        run: cog push
